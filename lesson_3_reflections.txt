When would you want to use a remote repository rather than keeping all your work local?
    
    When you are collaborating with other people or work with the project from different 
    work stations.

Why might you want to always pull changes manually rather than having Git automatically 
stay up-to-date with your remote repository?

	You may be contributing to a remote with your collaborators, if you are working on 
	separate issues, you may not want to automatically pull the updates, as they may 
	affect the progress in your local Git repository.

Describe the differences between forks, clones, and branches. When would you use one 
instead of another?

	Branches - are created within a single local repository, but also can be pushed 
	or pulled to/from a remote repository. 
	Clone - copying a repository along with its log of changes within local git, 
	from the remote, or from someone else's Github. The original cloned rep is not 
	referenced.
	Fork - cloning someone's repository within GitHub, the original repository is 
	referenced, but unaltered by the changes committed. 

What is the benefit of having a copy of the last known state of the remote stored 
locally?

	If there are changes introduced by your collaborators that are in conflict with the 
	changes that you have commited simultaneously prior to updating the remote, you can 
	safely review the conflicts after fetching the updates, resolve conflicts as 
	necessary and then merge the files.

How would you collaborate without using Git or GitHub? What would be easier, and what 
would be harder?

	Without Git or GitHub I would probably collaborate via Google Drive or Dropbox. 
	I wouldn't need to memorize Git commands, that would make it easier. Lack of 
	functionality such as fetching, merging, pull-requests, etc. would make collaborative 
	work harder.

When would you want to make changes in a separate branch rather than directly in master? 
What benefits does each approach have?

	You'd probably want to make changes in a separate branch when you collaborate with other 
	people and the change you're making is adding a new feature or may be considered 
	experimental or not ready for production level. After confirming with your collaborators 
	if the change should be included, you can merge your changes into master. When you need 
	to introduce changes to master that fix a bug, you can add changes directly to master, 
	after notifying your collaborators first.